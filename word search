class Solution {
    bool go(int i, int j, int n, int m, vector<vector<char>>& board, const string& word, int k) {
        if (k == word.size()) return true;
        if (i < 0 || j < 0 || i >= n || j >= m || board[i][j] != word[k]) return false;

        char ch = board[i][j];
        board[i][j] = '-1';  // Temporarily mark the cell as visited

        bool found = go(i + 1, j, n, m, board, word, k + 1) ||  // Move Down
                     go(i, j + 1, n, m, board, word, k + 1) ||  // Move Right
                     go(i - 1, j, n, m, board, word, k + 1) ||  // Move Up
                     go(i, j - 1, n, m, board, word, k + 1);    // Move Left

        board[i][j] = ch;  // Unmark the cell
        return found;
    }

public:
    bool exist(vector<vector<char>>& board, string word) {
        int n = board.size();
        int m = board[0].size();

        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < m; ++j) {
                if (board[i][j] == word[0] && go(i, j, n, m, board, word, 0)) {
                    return true;
                }
            }
        }

        return false;
    }
};
