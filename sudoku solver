class Solution {
    bool safe(int row, int col, vector<vector<char>>& sudoku, char val) {
        // Row check
        for (int i = 0; i < sudoku.size(); i++) {
            if (sudoku[row][i] == val) 
                return false;
            
            // Column check
            if (sudoku[i][col] == val) 
                return false;
            
            // 3x3 subgrid check
            
            if (sudoku[ 3 * (row / 3) + i / 3][3 * (col / 3) + i % 3] == val)
                return false;
        }
        return true;
    }

    bool solve(vector<vector<char>>& sudoku) {
        for (int row = 0; row < 9; row++) {
            for (int col = 0; col < 9; col++) {
                if (sudoku[row][col] == '.') {  // Check for empty cells
                    for (char val = '1'; val <= '9'; val++) {  // Use characters '1' to '9'
                        if (safe(row, col, sudoku, val)) {
                            sudoku[row][col] = val;  // Place the value

                            // Recursive call
                            if (solve(sudoku))
                                return true;

                            // Backtrack
                            sudoku[row][col] = '.';
                        }
                    }
                    return false;  // If no valid value is found, return false
                }
            }
        }
        return true;  // Return true if the board is solved
    }

public:
    void solveSudoku(vector<vector<char>>& board) {
        solve(board);
    }
};
