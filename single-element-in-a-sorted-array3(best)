class Solution {
public:
    int singleNonDuplicate(vector<int>& arr) {
          int n = arr.size(); //size of the array.

    //Edge cases:
    if (n == 1) return arr[0];
    if (arr[0] != arr[1]) return arr[0];
    if (arr[n - 1] != arr[n - 2]) return arr[n - 1];

    int l= 1;
    int h = n-2;
    int m = (l+h)/2;
    while (l <= h) {
        int m = (l + h) / 2;

        //if arr[mid] is the single element:
        if (arr[m] != arr[m + 1] && arr[m] != arr[m - 1]) {
            return arr[m];
        }

        if ((m% 2 == 1 && arr[m] == arr[m - 1])
                || (m % 2 == 0 && arr[m] == arr[m + 1])) {
            //eliminate the left half:
            l = m + 1;
        }
          else {
            //eliminate the right half:
            h= m - 1;
        }
    }

    // dummy return statement:
    return -1;



    }
};
